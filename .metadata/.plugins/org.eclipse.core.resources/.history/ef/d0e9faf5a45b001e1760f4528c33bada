package Servicio;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;

import DAO.DaoPersonas;
import DAO.DaoBotes;
import POJO.Persona;
import POJO.Zona;
import POJO.Bote;

public class Servicio {

	private static Servicio servicio = null;
	private HashMap<Persona, Persona> personas;
	private HashMap<Bote, Bote> botes;
	private HashMap<Bote, HashMap<Persona, Persona>> personaBote;
	
	public Servicio() {
		personas = DaoPersonas.getInstance().getPersonas();
		botes = DaoBotes.getInstance().getBotes();
		personaBote = new HashMap<Bote, HashMap<Persona, Persona>>();
	}
	
	
	
	
	public void asignarPersonasBote() {

		//Mostrar PERSONAS
		/*
		int i= 1;
		Iterator<Map.Entry<Persona, Persona>> iteratorPersona = personas.entrySet().iterator();
		while(iteratorPersona.hasNext()) {
            Map.Entry<Persona, Persona> personaEntry = iteratorPersona.next();
            Persona personaKey = personaEntry.getKey();
            Persona personaValue = personaEntry.getValue();
            
            System.out.print(personaKey.getClass() + "-" + personaKey.getDni() + "-" + personaKey.getNombre() + "-" + personaKey.getPais() + "-" + personaKey.getFechaNacimiento() + "-" + personaKey.getTipoPersona() + "-" + personaKey.getZona() + "-" + personaKey.isMinusvalia() 
            + "\n" + personaValue.getClass() + "-" + personaValue.getDni() + "-" + personaValue.getNombre() + "-" + personaValue.getPais() + "-" + personaValue.getFechaNacimiento() + "-" + personaValue.getTipoPersona() + "-" + personaValue.getZona() + "-" + personaValue.isMinusvalia() + "\n");
            i++;
            System.out.println("\n");
		}
		*/
		
		//Mostrar BOTES
		/*
        Iterator<Map.Entry<Bote, Bote>> it = botes.entrySet().iterator();
		while(it.hasNext()) {
            Map.Entry<Bote, Bote> boteEntry = it.next();
            Bote boteKey = boteEntry.getKey();
            Bote boteValue = boteEntry.getValue();
            
            System.out.println(boteKey.getId() + "-" + boteKey.getZona() + "-" + boteKey.getNumPlazas() + 
            		"\n" + boteValue.getId() + "-" + boteValue.getZona() + "-" + boteValue.getNumPlazas());
		}
		*/
		
		
		//Asignacion por cada Zona
		Zona[] zonas = Zona.values();
		
		HashMap<Persona, Persona> zonaPersonas = new HashMap<Persona, Persona>();
		
		for(int i = 0; i<zonas.length; i++) {
			
    		//Itero Botes
	        Iterator<Map.Entry<Bote, Bote>> iteratorBote = botes.entrySet().iterator();
			while(iteratorBote.hasNext()) {
	            Map.Entry<Bote, Bote> boteEntry = iteratorBote.next();
	            Bote boteKey = boteEntry.getKey();
	            Bote boteValue = boteEntry.getValue();
	            
	            
	            //System.out.print(boteKey.getId() + "-" + boteKey.getZona() + "\n");
	            
	            //Encuentra un bote de la zona[i]
	            if(boteKey.getZona().equals(zonas[i])) {
	            	
					//Itero Personas
		            Iterator<Map.Entry<Persona, Persona>> iteratorPersona = personas.entrySet().iterator();
		    		while(iteratorPersona.hasNext()) {
		                Map.Entry<Persona, Persona> personaEntry = iteratorPersona.next();
		                Persona personaKey = personaEntry.getKey();
		                Persona personaValue = personaEntry.getValue();
		                
		                
		                //Encuentra las personas de la zona[i] y se guardan en el bote sin superar el numero de plazas
			            if(personaKey.getZona().equals(zonas[i]) && zonaPersonas.size() <= boteKey.getNumPlazas()) {
			            	zonaPersonas.put(personaKey, personaValue);
			            	//System.out.print(personaKey.getDni() + "-" + personaKey.getZona() + "\n");
			            }
		    		}
	            	
	            }
	            //System.out.print("\n");
	            
	            //Guardo el bote y las personas de la zona[i]
	            personaBote.put(boteKey, zonaPersonas);
	            zonaPersonas.clear();
	            
			}
			
			//Mostrar ZONAPERSONA
			/*
	        Iterator<Map.Entry<Persona, Persona>> it = zonaPersonas.entrySet().iterator();
			while(it.hasNext()) {
	            Map.Entry<Persona, Persona> personaEntry = it.next();
	            Persona pk = personaEntry.getKey();
	            Persona pv = personaEntry.getValue();
	            
	            System.out.println(pk.getDni() + "-" + pk.getZona());
			}
			
			System.out.print("\n");
			*/
		}
		
		
		
		/*
		//Mostrar BOTE/PERSONA
        Iterator<Map.Entry<Bote, HashMap<Persona, Persona>>> i = personaBote.entrySet().iterator();
		while(i.hasNext()) {
            Map.Entry<Bote, HashMap<Persona, Persona>> pb = i.next();
            Bote bk = pb.getKey();
            HashMap<Persona, Persona> pv = pb.getValue();
            
            System.out.print(bk.getId() + "-" + bk.getZona() + "\n");
            
            for (Map.Entry<Persona, Persona> personaEntry : pv.entrySet()) {
                Persona personaKey = personaEntry.getKey();
                Persona personaValue = personaEntry.getValue();
                
                System.out.print(personaKey.getDni() + "-" + personaKey.getZona() + "\n");
                
            }
            
            System.out.print("\n");
		}
		*/
		
		
		for (Map.Entry<Bote, HashMap<Persona, Persona>> entry : personaBote.entrySet()) {
		    Bote bote = entry.getKey();
		    HashMap<Persona, Persona> personasEnBote = entry.getValue();

		    // Imprime información del bote
		    System.out.println(bote.getId()+ "-"+bote.getZona());

		    // Itera a través de las personas en el mapa de Persona a Persona
		    for (Map.Entry<Persona, Persona> personaEntry : personasEnBote.entrySet()) {
		        Persona personaKey = personaEntry.getKey();
		        Persona personaValue = personaEntry.getValue();

		        // Imprime información de la persona
		        System.out.println(personaKey.getDni() + "-" + personaKey.getZona());
		    }

		    System.out.println(); // Agrega una línea en blanco para separar las entradas de bote
		}
		
		
		/*
		Iterator<Map.Entry<Bote, HashMap<Persona, Persona>>> i = personaBote.entrySet().iterator();

		// Usar un conjunto para llevar un registro de las personas ya impresas
		Set<Persona> personasImpresas = new HashSet<>();

		while (i.hasNext()) {
		    Map.Entry<Bote, HashMap<Persona, Persona>> pb = i.next();
		    Bote bk = pb.getKey();
		    HashMap<Persona, Persona> pv = pb.getValue();

		    System.out.print(bk.getId() + "-" + bk.getZona() + "\n");

		    for (Map.Entry<Persona, Persona> personaEntry : pv.entrySet()) {
		        Persona personaKey = personaEntry.getKey();

		        // Verificar si la persona ya ha sido impresa
		        if (!personasImpresas.contains(personaKey)) {
		            Persona personaValue = personaEntry.getValue();

		            System.out.print(personaKey.getDni() + "-" + personaKey.getZona() + "\n");

		            // Agregar la persona al conjunto para evitar repeticiones
		            personasImpresas.add(personaKey);
		        }
		    }

		    System.out.print("\n");
		}
		*/
		
		
		
		
	}
	

	//TODO
	public void tiempo() {
        Timer timer = new Timer();
        int delay = 0; // Retraso de 1 segundo (en milisegundos)
        int periodo = 1000; // Intervalo de 2 segundos (en milisegundos)

        timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                
            }
        }, delay, periodo);
	}
	
	
	public Servicio getInstance() {
		if(servicio == null) {
			return new Servicio();
		}
		return servicio;
	}
	
	
	
	
}
